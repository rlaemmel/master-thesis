Working Title
-------------
Evolution and Dependencies of Haskell Packages

Research questions
------------------
Can we (semi-)automatically detect compatibility and non-compatibility between package versions?

Motivation
----------
This thesis was inspired by a problem with Haskell package dependency management colloquially referred to as "Cabal Hell". It is related to the "Dependency Hell" that users of *nix package managers (used to) experience "DLL Hell" on Windows and "JAR Hell" on the Java platform.
Third party software libraries are those that didn't come with an initial installation of a development tool, but are rather installed on demand. These libraries (as all software) [citation needed] evolve over time resulting in a progression of versions. These versions of libraries in turn use other libraries, that is to say they depend on them. But not every version of a library is compatible with every version of its dependencies. For some languages/platforms there are central repositories hosting libraries together with meta information about dependencies and version constraints on the dependencies. Finding a set of packages that a developer would like to use in her program such that all dependency constraints are satisfied is not trivial. [Solving Binary Optimization]
The goal of this thesis is to show that the compatibility annotations are not always accurate, explain the disadvantages of this inaccuracy and explore how the classification into compatible and incompatible versions could be automated.

The Package Versioning Policy (PVP)
-----------------------------------
The Package Versioning Policy [PVP] was introduced to ???? [Eternal compatibility in theory]. It specifies that a new version of a package must have an increased major version if it might cause any package that depended on the previous version to break with the new version. (What does break mean?). The idea being to seperate bugfix versions (that ensure compatibility) from actual interface or functionality changes (that might introduce incompatibility). Other packages could then by specifying their dependency constraints accordingly use new bugfix versions for free but would have to be reviewed and possibly updated to use a newer version with a possibly breaking change.
As of recently there is opposition to this policy [BOS discussions] since it requires review even if using a newer version that required a major change is just fine. There are examples where an upper version bound unnecessarily prevents you from installing a package both fictional ones as well as encountered in reality.

Background
----------
Related work:
Static Code Analysis
Empirical Software Research
Software Configuration Manangement
Software Change Impact Analysis
Software Slicing
Apt-pbo: solving the software dependency problem using pseudo-boolean optimization
A formal model of program dependences and its implications for software testing, debugging, and maintenance
Fine-Grained Analysis of Change Couplings
Using Dependency Model to Support Software Architecture Evolution

Related technologies:
Talking about source package manager.
Cabal
Stackage
Sandboxes
go fix
Standalone Distribution
Continuous Integration
Other source package managers: Adept-dm, OPAM, RubyGems / Bundler (Ruby), PIP / PyPI (Python), Packagist / Composer (PHP), NPM (Node.JS), Bower (JS, CSS, HTML), CocoaPods (Objective-C), Maven (Java), Lein (Clojure)
https://www.versioneye.com/
http://www.trevorpounds.com/blog/?p=33

Milestones
----------
Insert cross package call graph into graph database.
Accuracy (How many of investigated source files are actually parseable)
Sample size (How many packages are considered)
Invent and run and visualize interesting queries.

It is sometimes necessary to have multiple instances of the same version installed. Or you have to reinstall many packages or even are unable to have two packages installed at the same time. Not very many package managers support this.

There is an inherent tension between using cutting-edge libraries and developing against a stable interface. [citation needed]

Examples of repositories/tools aimed at this use-case include: Adept-dm (Java), OPAM (OCaml), RubyGems / Bundler (Ruby), PIP / PyPI (Python), Packagist / Composer (PHP), NPM (Node.JS), Bower (JS, CSS, HTML), CocoaPods (Objective-C), Maven (Java), Lein (Clojure) [versioneye]. But this thesis focusses on Hackage / Cabal (Haskell). 

Challenges
----------
Different Variants exist.
Circular Dependencies.
Lookup on index of qualified names is slow.
Typeclass instances.

